{"version":3,"sources":["asserts/images/background.jpg","asserts/images/profile.jpg","asserts/images/smarthome.jpg","asserts/images/personalWeb.jpg","asserts/images/logo.jpg","components/Welcomepage/HomePage.js","components/Welcomepage/About.js","components/Welcomepage/Blog.js","components/Welcomepage/NavBar.js","components/Welcomepage/Contact.js","components/Welcome.js","components/Blog/AppTFReact.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","HomePage","className","src","background","style","width","window","innerWidth","height","innerHeight","alt","position","Component","About","Container","Row","Col","textAlign","Image","require","roundedCircle","xs","Badge","pill","variant","CoverBlog","props","Card","Body","Title","title","Text","description","blog1","blog2","Blog","backgroundColor","CardColumns","Img","Footer","to","NavBar","Navbar","collapseOnSelect","bg","expand","sticky","Brand","href","Toggle","aria-controls","Collapse","id","Nav","Item","Link","Contact","order","fontSize","Welcome","AppTFReact","md","frameborder","allow","allowfullscreen","Button","App","exact","path","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.b30f95f1.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/background.99e6debc.jpg\";","module.exports = __webpack_public_path__ + \"static/media/profile.72fc23dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/smarthome.1221d322.jpg\";","module.exports = __webpack_public_path__ + \"static/media/personalWeb.2ff37303.jpg\";","module.exports = __webpack_public_path__ + \"static/media/logo.7d63871e.jpg\";","import React, { Component } from 'react';\nimport background from '../../asserts/images/background.jpg'\n\nclass HomePage extends Component {\n  render(){\n    return (\n      <div >\n        <header className=\"App-header\">\n          <img src={background} style={{width: window.innerWidth, \n              height: window.innerHeight,}} alt='Hi, Welcome to my blog!' />\n          <p style={{position: 'absolute',}}> \n            Hi, Welcome to my Blog!\n          </p>\n        </header>\n      </div>\n    );\n  }\n}\n\nexport default HomePage;","import React from 'react';\nimport { Container, Row, Col, Image, Badge} from 'react-bootstrap';\n\nimport './Styles.css'\n\n\nconst About=()=> {\n  return (     \n    <div >\n      <Container className=\"header\" >\n              <Row>\n                <Col ></Col>                \n                <Col ></Col>\n              </Row>\n      </Container> \n\n      <Container  >       \n        <h2 className='header' style={{textAlign:\"center\"}}>About</h2>  \n              \n          <Row >\n            <Col  >\n              <Image width={220} height={200} \n              src={require(\"../../asserts/images/profile.jpg\")} roundedCircle />\n            </Col>\n            <Col xs={2}  >\n            <div>\n              <Badge pill variant=\"info\">\n                Computer Science\n              </Badge>{' '}\n              <Badge pill variant=\"success\">\n                Electronic Embedded System\n              </Badge>{' '}\n              <Badge pill variant=\"primary\">\n                IoT and AIoT\n              </Badge>{' '}\n              <Badge pill variant=\"warning\">\n                Machine Learning\n              </Badge>{' '}\n              {/*<Badge pill variant=\"warning\">\n                Gryffindor fan\n              </Badge>{' '}\n              <Badge pill variant=\"light\">\n                Reading\n              </Badge>{' '}\n              <Badge pill variant=\"dark\">\n                Travelling\n              </Badge>*/}\n            </div>                  \n            </Col> \n            <Col></Col>   \n          </Row>\n      </Container>\n\n      <Container className=\"footer\" >\n              <Row>\n                <Col ></Col>                \n                <Col ></Col>\n              </Row>\n      </Container> \n\n    </div>\n\n\n    \n  \n        \n        \n    \n    \n  );\n}\nexport default About;","import React from 'react';\nimport { Container, Row, Col, Card, CardColumns} from 'react-bootstrap';\nimport { Link, } from \"react-router-dom\";\n\n\n\n  \nfunction CoverBlog(props) {\n  return (   \n    \n      <Card.Body>\n        <Card.Title>{props.title}</Card.Title>\n        <Card.Text>{props.description}</Card.Text>\n      </Card.Body>  \n    \n  );\n}\n\nconst blog1 = {\n  title : \"App mobile for Image Recognition\",\n  description : \"Developed using the library TensorFlow for React-Native, this app can identify objects by taking photos with deploying a custom-trained image classification model.\"\n};\n\nconst blog2 = {\n  title : \"Creating a personal website from scratch\",\n  description : \"Using React we can quicly create a simple personal website, with basic Javascript/html/CSS,no expertise needed\"\n};\n\n\nfunction Blog() {\n   return (    \n        \n      <div style={{backgroundColor:\"ivory\"}}>\n        <Container className=\"header\" >\n          <Row>\n            <Col ></Col>                \n            <Col ></Col>\n          </Row>\n        </Container>\n\n        <Container >\n          <h2 className='header' style={{textAlign:\"center\"}}>Blog</h2>  \n\n          <CardColumns>\n            <Card>\n              <Card.Img variant=\"top\" width={226} height={200} src={require(\"../../asserts/images/smarthome.jpg\")} />\n              <CoverBlog title={blog1.title} description={blog1.description} />\n              <Card.Footer>\n              <small className=\"text-muted\"><Link to='/blog/apptfreact'>Demo and more</Link></small>\n              </Card.Footer>   \n            </Card>\n              \n            <Card>\n              <Card.Img variant=\"top\"  width={226} height={200} src={require(\"../../asserts/images/personalWeb.jpg\")}/>\n              <CoverBlog title={blog2.title} description={blog2.description} />\n              <Card.Footer>\n              <small className=\"text-muted\">Coming soon</small>\n              </Card.Footer>     \n            </Card>\n\n          </CardColumns> \n        </Container> \n\n        <Container className=\"footer\" >\n          <Row>\n            <Col ></Col>                \n            <Col ></Col>\n          </Row>\n        </Container>\n        \n      </div>\n        \n    );\n  \n}\n\n\n  \nexport default Blog;","import React from 'react';\nimport { Nav, Navbar, } from 'react-bootstrap';\n\n\nconst NavBar=()=>{\n  return(\n    <Navbar collapseOnSelect bg=\"dark\" expand=\"md\" variant=\"dark\" sticky=\"top\">\n      <Navbar.Brand href=\"/\">Dian CHEN</Navbar.Brand>           \n      <Navbar.Toggle aria-controls=\"responsive-navbar-nav\"/>      \n      <Navbar.Collapse id=\"responsive-navbar-nav\" >\n        <Nav className=\"mr-auto\" style={{textAlign:\"right\"}}>\n          <Nav.Item><Nav.Link href=\"#about\">About</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"#blog\">Blog</Nav.Link></Nav.Item>\n          <Nav.Item><Nav.Link href=\"#contact\">Contact</Nav.Link></Nav.Item>\n        </Nav>\n      </Navbar.Collapse>\n    </Navbar>\n  );\n}\n\nexport default NavBar\n\n","import React from 'react';\nimport { Container, Row, Col, Image } from 'react-bootstrap';\nimport LinkedInIcon from '@material-ui/icons/LinkedIn';\nimport MailIcon from '@material-ui/icons/Mail';\nimport GitHubIcon from '@material-ui/icons/GitHub';\n\nimport './Styles.css'\n\n\nfunction Contact() {\n    \n    return (\n        <div style={{backgroundColor:\"dimgray\"}} >                    \n            <Container className='header'>\n                <Row>               \n                </Row>\n            </Container>\n\n            <Container >\n                <h2 className='header' style={{textAlign:\"center\"}}>Contact</h2>                                             \n                    <Row>\n                        <Col xs={{ order: 'first' }} >  \n                            <Image width={220} height={200} \n                            src={require(\"../../asserts/images/logo.jpg\")} roundedCircle />            \n                        </Col>\n                        <Col  >\n                        <p>If you are interested or have any question, you can contact me via </p>\n                            <a href='mailto:chendian2017@gmail.com'><MailIcon style={{ fontSize: 40 }} /></a>\n                            <a href='https://www.linkedin.com/in/dian-chen'><LinkedInIcon style={{ fontSize: 40 }}/></a>\n                            <a href='https://github.com/diancici'><GitHubIcon style={{ fontSize: 40 }}/></a>\n                        </Col>\n                        <Col >              \n                        </Col>\n                    </Row>\n            </Container>\n\n            <Container className=\"footer\" >\n                <Row>\n                    <Col ></Col>                \n                    <Col ></Col>\n                </Row>\n            </Container>\n\n            \n            \n        </div>\n    )\n            \n}\n\nexport default Contact;","import React, { Component } from 'react';\n\nimport HomePage from './Welcomepage/HomePage';\nimport About from './Welcomepage/About';\nimport Blog from './Welcomepage/Blog';\nimport NavBar from './Welcomepage/NavBar';\nimport Contact from './Welcomepage/Contact';\n\nclass Welcome extends Component {\n    render() {\n        return (\n        <div>\n            <NavBar />\n            \n            <sction id='home'>\n                <HomePage />             \n            </sction>\n            \n            <sction id='about' >\n                <About />      \n            </sction>\n\n            <sction id='blog'>\n                <Blog />      \n            </sction>\n            \n            <sction id='contact' >\n                <Contact />    \n            </sction>         \n              \n           \n        </div>\n        )\n    }\n}\n\nexport default Welcome;","import { DriveEtaRounded } from '@material-ui/icons';\nimport React, { Component } from 'react';\nimport { Container, Row, Col, Button, Badge} from 'react-bootstrap';\n\nimport './Styles.css'\n\n\nclass AppTFReact extends Component{\n    render() {\n        return (\n            <div > \n                <div className='header'>\n                </div> \n\n                <Container >\n                    <Row >\n                    <Col xs={0} md={2}></Col>\n                    \n                    <Col xs={12} md={8} >\n                        <h2 className='heading'> Build an APP in React Native for Image Recognition with TensorFlow</h2>\n                        <Badge pill variant=\"primary\">\n                            TensorFlow \n                        </Badge>{' '}\n                        <Badge pill variant=\"success\">\n                            React Native\n                        </Badge>{' '}\n                        <Badge pill variant=\"danger\">\n                            Image Classification\n                        </Badge>{' '}\n                        <Badge pill variant=\"warning\">\n                            JavaScript\n                        </Badge>{' '}\n\n                        <p className='context'>On February 04, 2020, TensorFlow posted a <a href=\"https://blog.tensorflow.org/2020/02/tensorflowjs-for-react-native-is-here.html\">blog </a> \n                        formally announcing its support for React Native.  \n                        This tfjs-react-native package supports GPU backend, Model Loading and Saving, Training, Image & Video Handling. In this blog, we will mainly talk about \n                        how to deploy a pre-trained model of image classification in React-Native for offline image recognition.    \n                        </p>\n\n                        <hr></hr>\n\n                        <h4 className='subheading'>Introduction & Motivation </h4>\n                        <p>I came across this topic during my internship that the company asked me to make an app in React-Native which identifies products by taking photos.\n                            React Native is a framework developed by Facebook for building apps of ios and android. It mainly uses Javascript for coding. For conveience, I trained the model of \n                            image classification with TensorFlow for python. Thanks to this fresh <em><strong>tfjs-react-native package </strong></em>, we can now deploy models trained in python in the envrionment Javascript.\n                            This blog will not talk about how to train an image classification model , but will focus on how to deploy the model in React Native.\n                        </p>\n\n                        <h4 className='subheading'>Model Preparation </h4>\n                        <p>We could find numerous pre-trained models for image classification in <a href='https://tfhub.dev/'>TensorFlow hub</a>. For exemple, we can select :\n                            <ul>\n                                <li>Problem domain: Image Classfication </li>\n                                <li>Architecture: MobileNet V2</li>\n                                <li>Dataset: ImageNet(ILSVRC-2012-CLS)</li>\n                            </ul>\n                            Of course, we could choose another architecture or dataset. It depends on what scenario you want to apply it to. Here we have chosen MobileNet V2 \n                            as it is an optimised neural network architecture for efficient on-device image classification and related tasks. The dataset ImageNet is also one of the most used dataset\n                            for image classification. In addition to these basic options, we need to pay more attention to the size of the input image that the model requires. Take <a href='https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/4'>this model </a> \n                            for example, its input size is 224x224 pixels. It means that each input image should be treated to fit the input size of the model before using the model.\n                        </p>   \n                        <p> \n                            Then we can train a customized model from these pre-trained models with the technique <em><strong>Transfer Learning</strong></em>. This will acquire a propre dataset and some basic knowledge\n                            of machine learning. We're not going to get into that this time. Generally, we will train the model with TensorFlow for python and the format of the trained model will be <em><strong>SavedModel</strong></em>.    \n                        </p>\n\n                        <h4 className='subheading'>Conversion of the model</h4>\n                        <p>\n                            Since the environment of React Native is Javascript, we have to convert the SavedModel in .js format with <a href='https://github.com/tensorflow/tfjs/tree/master/tfjs-converter'>TF.js converter</a> to get the model in .js. \n                            So why we don't use the js format of pre-trained model from the hub ? Let's firstly see the config parameters of the converter and explain why.\n                            After installation as guided, we can convert the model with these conversion flags:\n                            <ul>\n                                <li>input_format=<em><strong>tf_saved_model</strong></em></li>\n                                <li>output_format=<em><strong>tfjs_graph_model</strong></em></li>\n                                <li>weight_shard_size_bytes= 4MB/8MB/...</li>\n                            </ul> \n                            The converter will generate a model.json with a bunch of <em><strong>group1-shard1ofN.bin </strong></em> files. The model.json represents the architecture of the model and the group-shard.bin files are the weights of the model. Since the tfjs-react-native package only supports one group1-shard.bin file, we have to set the flag weight_shard_size_bytes\n                            as large as it could to make sure that only one group-shard.bin file will be generated. Actually, the model of .js format downloaded from the hub contain piles of group-shard.bin files which can not be used in React-Native.             \n                        </p>\n\n                        <h4 className='subheading'>Deployment in React Native</h4>\n                        <p>Firstly, we will put the model files in local file system so that the app can read the files offline. Then we will create a component in React Native called Camera.\n                            This component controls the following two functions:\n                            <ul>\n                                <li>takePicture : Take and process the pictures  </li>\n                                <li>callModelPrediction: Apply the model stored in the file system</li>\n                            </ul>\n                        </p>\n                        <p>\n                            In the function takePicture, we will firstly call <em><strong>RNCamera</strong></em> to take a picture of the object. We will then process the image to meet the needs of the model input.\n                            We will take the following steps:\n                            <ul>\n                                <li>Resize the image</li>\n                                <li>Reformatting the image : datatype, encoding format, Pixel range</li>\n                            </ul>\n                            For exemple, the model we use usually requires an image size 1*224*224*3, float32 datatype, tensor encoding format, pixel range[0,1], then we need to take the following steps:\n                            <ul>\n                                <li>Crop the image to 224*224*3 with <em><strong>ImageEditor</strong></em></li>\n                                <li>Convert data encoding format from base64 to Uint8Array, and then from Uint8Array to Tensor Object</li>\n                                <li>Normalize the pixel range from [0,255] to [0,1]</li>\n                                <li>Convert datatype to float32</li>\n                            </ul>\n                        </p>\n                        <p>\n                        After following these steps, we will get an image which meet the model input : <em><strong>[1*224*224*3], float32, Tensor Object,  Pixel values [0, 1]</strong></em>. \n                        Now this processed image can be used as the input to call the model for making a prediction. There are no complicated processing steps in this step.\n                        Just remember the most important thing : Model calling method should match the model converter process. That means, we should use <em><strong>tf.loadGraphModel</strong></em> to call the model\n                        since we convert the model tf_saved_model to model tfjs_graph_model. If the output of the model is not a graph model, we can't use the method tf.loadGraphModel.\n                        </p>\n                        <p>The model will output the result after 5 or 10 seconds after calling. The output is an array which represents each possibility for each class of objects.\n                            We can extract the maximum possibility and its index to do further processing, for exemple, comparing with the database to find the corresponding product name.\n                        </p>\n\n                        <h4 className='subheading'>Demo</h4>\n                        <p>\n                        Here I'm showing an app made during my internship for the company that can identify specific products offline. It includes an image classification model that recognizes 14 products. \n                        For some products, the recognition accuracy is almost 100%. Of course, the accuracy of the model depends heavily on the dataset, and the angle of the shot will also have an impact on the results.\n                        Anyway, this was a bold and encouraging experiment for me. I hope this article can help you with how to apply machine learning to your React-Native application! You can also find an exemple script in \n                        my <a href='https://github.com/diancici/APP-React-Native-Build-with-TensorFlow-.git'>github</a>.\n                        </p>\n                        <div className='iframe-container'>\n                        <iframe \n                            src=\"https://www.youtube.com/embed/dNqdTC97NVM\" frameborder=\"0\" \n                            allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n                            allowfullscreen title='Video: Demo mobile APP for Image Recognition by taking photos '> \n                            <p> \n                                <a href=\"https://www.youtube.com/embed/dNqdTC97NVM\">\n                                Fallback link for browsers that don't support iframes\n                                </a>\n                            </p>\n                        </iframe>\n                        </div>\n                        <hr></hr>\n                    </Col>\n                    <Col xs={0} md={2}></Col>\n                    </Row>\n                \n                    <Row> \n                        <Col xs={8}></Col>                            \n                        <Col><Button variant=\"secondary\" href=\"/#blog\">More blogs</Button> {' '}</Col>\n                        <Col></Col>\n                    </Row>\n                </Container>\n\n                <div className='footer'>\n                </div>\n\n            </div>\n\n        );\n    }\n}\n\nexport default AppTFReact;","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport '../node_modules/bootstrap/dist/css/bootstrap.min.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nimport './App.css';\nimport Welcome from './components/Welcome'\nimport AppTFReact from './components/Blog/AppTFReact'\n\nclass App extends Component {\n  render(){\n\n    return (\n      \n        <Router>\n          <div>\n            <Switch>\n              <Route exact path=\"/\"><Welcome /></Route>\n              <Route path=\"/blog/apptfreact\"><AppTFReact /></Route>\n            </Switch>\n          </div>                  \n        </Router>\n               \n\n     \n           \n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App  />\n   \n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}