{"ast":null,"code":"var _jsxFileName = \"/Users/chendian/Desktop/Projet/Personnelle/Portofolio/src/components/Blog/AppTFReact.js\";\nimport React, { Component } from 'react';\n\nclass AppTFReact extends Component {\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 6,\n        columnNumber: 13\n      }\n    }, /*#__PURE__*/React.createElement(\"h3\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 7,\n        columnNumber: 17\n      }\n    }, \" Build an APP in React Native for Image Recognition with TensorFlow\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 17\n      }\n    }, \"On February 04, 2020, TensorFlow posted a \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://blog.tensorflow.org/2020/02/tensorflowjs-for-react-native-is-here.html\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 8,\n        columnNumber: 62\n      }\n    }, \"blog\"), \"formally announcing its support for React Native. The Google Brain Team developed a new  platform of integration suited to the React Native environment. The tfjs-react-native package supports GPU backend, Model Loading and Saving, Training, Image &amp Video Handling. In this blog, we will mainly talk about how to deploy a pre-trained model of image classification in React-Native for offline image recognition.\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 14,\n        columnNumber: 17\n      }\n    }, \"Introduction & Motivation \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 15,\n        columnNumber: 17\n      }\n    }, \"I came across this topic during my internship that the company asked me to make an app in React-Native which identifies products by taking photos. React Native is a framework developed by Facebook for building apps of ios and android. It mainly uses Javascript for coding. For conveience, I trained the model of image classification in TensorFlow python. Thanks to this fresh tfjs-react-native package, we can now deploy models trained in python in the envrionment Javascript. This blog will not talk about how to train an image classification model in TensorFlow python, but will focus on how to deploy the model in React Native.\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }\n    }, \"Model Preparation \"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }\n    }, \"We could find numerous pre-trained models for image classification in \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://tfhub.dev/\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 90\n      }\n    }, \"TensorFlow hub\"), \". For exemple, we can select :\", /*#__PURE__*/React.createElement(\"ul\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 24,\n        columnNumber: 25\n      }\n    }, \"Problem domain: Image Classfication \"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 25\n      }\n    }, \"Architecture: MobileNet V2\"), /*#__PURE__*/React.createElement(\"li\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26,\n        columnNumber: 25\n      }\n    }, \"Dataset: ImageNet(ILSVRC-2012-CLS)\")), \"Of course, we could choose another architecture or dataset. It depends on what scenario you want to apply it to. Here we have chosen MobileNet V2 as it is an optimised neural network architecture for efficient on-device image classification and related tasks. The dataset ImageNet is also one of the most used dataset for image classification. In addition to these basic options, we need to pay more attention to the size of the input image that the model requires. Take \", /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/4\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 174\n      }\n    }, \"this model\"), \"for example, its input size is 224x224 pixels. It means that each input image should be treated to fit the input size of the model before using the model.\"), /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 33,\n        columnNumber: 17\n      }\n    }, \"By the way, we can also train a customized model from these pre-trained models with the technique Transfer Learning. This will acquire our propre dataset and some basic knowledge of machine learning. We're not going to get into that this time. Typically, models trained in TensorFlow for python are saved as SavedModel, so we download this format (not the .js format) of model from the website. This kind of model includes a classification layer as the output layer and we can apply it directly.\"), /*#__PURE__*/React.createElement(\"h5\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 17\n      }\n    }, \"Deployment in React Native\"), /*#__PURE__*/React.createElement(\"iframe\", {\n      width: \"560\",\n      height: \"315\",\n      src: \"https://www.youtube.com/embed/dNqdTC97NVM\",\n      frameborder: \"0\",\n      allow: \"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\",\n      allowfullscreen: true,\n      title: \"Video: Demo mobile APP for Image Recognition by taking photos \",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }\n    }, /*#__PURE__*/React.createElement(\"p\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 21\n      }\n    }, /*#__PURE__*/React.createElement(\"a\", {\n      href: \"https://www.youtube.com/embed/dNqdTC97NVM\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 25\n      }\n    }, \"Fallback link for browsers that don't support iframes\"))));\n  }\n\n}\n\nexport default AppTFReact;","map":{"version":3,"sources":["/Users/chendian/Desktop/Projet/Personnelle/Portofolio/src/components/Blog/AppTFReact.js"],"names":["React","Component","AppTFReact","render"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;AAEA,MAAMC,UAAN,SAAyBD,SAAzB,CAAkC;AAC9BE,EAAAA,MAAM,GAAG;AACL,wBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6EADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kEAA6C;AAAG,MAAA,IAAI,EAAC,gFAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAA7C,iaAFJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCARJ,eASI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,goBATJ,eAeI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4BAfJ,eAgBI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8FAAyE;AAAG,MAAA,IAAI,EAAC,oBAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBAAzE,iDACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,8CADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,4CAHJ,CADJ,0eAQ6J;AAAG,MAAA,IAAI,EAAC,yEAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAR7J,+JAhBJ,eA2BI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yfA3BJ,eAiCI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oCAjCJ,eAoCI;AAAQ,MAAA,KAAK,EAAC,KAAd;AAAoB,MAAA,MAAM,EAAC,KAA3B;AACI,MAAA,GAAG,EAAC,2CADR;AACoD,MAAA,WAAW,EAAC,GADhE;AAEI,MAAA,KAAK,EAAC,0FAFV;AAGI,MAAA,eAAe,MAHnB;AAGoB,MAAA,KAAK,EAAC,gEAH1B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,oBACI;AAAG,MAAA,IAAI,EAAC,2CAAR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+DADJ,CAJJ,CApCJ,CADJ;AAmDH;;AArD6B;;AAwDlC,eAAeD,UAAf","sourcesContent":["import React, { Component } from 'react';\n\nclass AppTFReact extends Component{\n    render() {\n        return (\n            <div > \n                <h3> Build an APP in React Native for Image Recognition with TensorFlow</h3>\n                <p>On February 04, 2020, TensorFlow posted a <a href=\"https://blog.tensorflow.org/2020/02/tensorflowjs-for-react-native-is-here.html\">blog</a> \n                formally announcing its support for React Native. The Google Brain Team developed a new  platform of integration suited to the React Native environment. \n                The tfjs-react-native package supports GPU backend, Model Loading and Saving, Training, Image &amp Video Handling. In this blog, we will mainly talk about \n                how to deploy a pre-trained model of image classification in React-Native for offline image recognition.    \n                </p>\n\n                <h5>Introduction & Motivation </h5>\n                <p>I came across this topic during my internship that the company asked me to make an app in React-Native which identifies products by taking photos.\n                    React Native is a framework developed by Facebook for building apps of ios and android. It mainly uses Javascript for coding. For conveience, I trained the model of \n                    image classification in TensorFlow python. Thanks to this fresh tfjs-react-native package, we can now deploy models trained in python in the envrionment Javascript.\n                    This blog will not talk about how to train an image classification model in TensorFlow python, but will focus on how to deploy the model in React Native.\n                </p>\n\n                <h5>Model Preparation </h5>\n                <p>We could find numerous pre-trained models for image classification in <a href='https://tfhub.dev/'>TensorFlow hub</a>. For exemple, we can select :\n                    <ul>\n                        <li>Problem domain: Image Classfication </li>\n                        <li>Architecture: MobileNet V2</li>\n                        <li>Dataset: ImageNet(ILSVRC-2012-CLS)</li>\n                    </ul>\n                    Of course, we could choose another architecture or dataset. It depends on what scenario you want to apply it to. Here we have chosen MobileNet V2 \n                    as it is an optimised neural network architecture for efficient on-device image classification and related tasks. The dataset ImageNet is also one of the most used dataset\n                    for image classification. In addition to these basic options, we need to pay more attention to the size of the input image that the model requires. Take <a href='https://tfhub.dev/google/imagenet/mobilenet_v2_140_224/classification/4'>this model</a> \n                    for example, its input size is 224x224 pixels. It means that each input image should be treated to fit the input size of the model before using the model.\n                </p>   \n                <p> \n                    By the way, we can also train a customized model from these pre-trained models with the technique Transfer Learning. This will acquire our propre dataset and some basic knowledge\n                    of machine learning. We're not going to get into that this time. Typically, models trained in TensorFlow for python are saved as SavedModel, \n                    so we download this format (not the .js format) of model from the website. This kind of model includes a classification layer as the output layer and we can apply it directly.\n                </p>\n\n                <h5>Deployment in React Native</h5>\n\n\n                <iframe width=\"560\" height=\"315\" \n                    src=\"https://www.youtube.com/embed/dNqdTC97NVM\" frameborder=\"0\" \n                    allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture\" \n                    allowfullscreen title='Video: Demo mobile APP for Image Recognition by taking photos '> \n                    <p> \n                        <a href=\"https://www.youtube.com/embed/dNqdTC97NVM\">\n                        Fallback link for browsers that don't support iframes\n                        </a>\n                    </p>\n                </iframe>\n\n            </div>\n\n        );\n    }\n}\n\nexport default AppTFReact;"]},"metadata":{},"sourceType":"module"}